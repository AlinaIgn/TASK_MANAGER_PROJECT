[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "TaskManagerConfig",
        "kind": 6,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.apps",
        "description": "TASK_MANAGER_PROJECT.task_manager.apps",
        "peekOfCode": "class TaskManagerConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"task_manager\"",
        "detail": "TASK_MANAGER_PROJECT.task_manager.apps",
        "documentation": {}
    },
    {
        "label": "SignUpForm",
        "kind": 6,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.forms",
        "description": "TASK_MANAGER_PROJECT.task_manager.forms",
        "peekOfCode": "class SignUpForm(UserCreationForm):\n    class Meta:\n        model = User\n        fields = [\"username\", \"password1\", \"password2\"]\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = [\"title\", \"description\", \"due_date\", \"priority\", \"category\"]\nclass TaskCategoryForm(forms.ModelForm):\n    class Meta:",
        "detail": "TASK_MANAGER_PROJECT.task_manager.forms",
        "documentation": {}
    },
    {
        "label": "TaskForm",
        "kind": 6,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.forms",
        "description": "TASK_MANAGER_PROJECT.task_manager.forms",
        "peekOfCode": "class TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = [\"title\", \"description\", \"due_date\", \"priority\", \"category\"]\nclass TaskCategoryForm(forms.ModelForm):\n    class Meta:\n        model = TaskCategory\n        fields = [\"name\"]\nclass CategoryForm(forms.ModelForm):\n    class Meta:",
        "detail": "TASK_MANAGER_PROJECT.task_manager.forms",
        "documentation": {}
    },
    {
        "label": "TaskCategoryForm",
        "kind": 6,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.forms",
        "description": "TASK_MANAGER_PROJECT.task_manager.forms",
        "peekOfCode": "class TaskCategoryForm(forms.ModelForm):\n    class Meta:\n        model = TaskCategory\n        fields = [\"name\"]\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = [\"name\"]",
        "detail": "TASK_MANAGER_PROJECT.task_manager.forms",
        "documentation": {}
    },
    {
        "label": "CategoryForm",
        "kind": 6,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.forms",
        "description": "TASK_MANAGER_PROJECT.task_manager.forms",
        "peekOfCode": "class CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = [\"name\"]",
        "detail": "TASK_MANAGER_PROJECT.task_manager.forms",
        "documentation": {}
    },
    {
        "label": "TaskCategory",
        "kind": 6,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.models",
        "description": "TASK_MANAGER_PROJECT.task_manager.models",
        "peekOfCode": "class TaskCategory(models.Model):\n    name = models.CharField(max_length=100)\n    def __str__(self):\n        return self.name\nclass Task(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    due_date = models.DateTimeField()\n    priority = models.IntegerField()\n    category = models.ForeignKey(TaskCategory, on_delete=models.CASCADE)",
        "detail": "TASK_MANAGER_PROJECT.task_manager.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.models",
        "description": "TASK_MANAGER_PROJECT.task_manager.models",
        "peekOfCode": "class Task(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    due_date = models.DateTimeField()\n    priority = models.IntegerField()\n    category = models.ForeignKey(TaskCategory, on_delete=models.CASCADE)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    completed = models.BooleanField(default=False)\n    def __str__(self):\n        return self.title",
        "detail": "TASK_MANAGER_PROJECT.task_manager.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.models",
        "description": "TASK_MANAGER_PROJECT.task_manager.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=100)\n    def __str__(self):\n        return self.name\nclass Task(models.Model):\n    # ... other fields ...\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)",
        "detail": "TASK_MANAGER_PROJECT.task_manager.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.models",
        "description": "TASK_MANAGER_PROJECT.task_manager.models",
        "peekOfCode": "class Task(models.Model):\n    # ... other fields ...\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)",
        "detail": "TASK_MANAGER_PROJECT.task_manager.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.urls",
        "description": "TASK_MANAGER_PROJECT.task_manager.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.task_list, name=\"task_list\"),\n    path(\"task/create/\", views.create_task, name=\"create_task\"),\n    path(\"task/edit/<int:task_id>/\", views.edit_task, name=\"edit_task\"),\n    path(\"task/delete/<int:task_id>/\", views.delete_task, name=\"delete_task\"),\n]",
        "detail": "TASK_MANAGER_PROJECT.task_manager.urls",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.views",
        "description": "TASK_MANAGER_PROJECT.task_manager.views",
        "peekOfCode": "def signup(request):\n    if request.method == \"POST\":\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            user.refresh_from_db()  # Load the profile instance created by the signal\n            user.profile.birth_date = form.cleaned_data.get(\"birth_date\")\n            user.save()\n            username = form.cleaned_data.get(\"username\")\n            password = form.cleaned_data.get(\"password1\")",
        "detail": "TASK_MANAGER_PROJECT.task_manager.views",
        "documentation": {}
    },
    {
        "label": "task_list",
        "kind": 2,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.views",
        "description": "TASK_MANAGER_PROJECT.task_manager.views",
        "peekOfCode": "def task_list(request):\n    tasks = Task.objects.filter(user=request.user)\n    return render(request, \"task_manager/task_list.html\", {\"tasks\": tasks})\n@login_required\ndef create_task(request):\n    if request.method == \"POST\":\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.user = request.user",
        "detail": "TASK_MANAGER_PROJECT.task_manager.views",
        "documentation": {}
    },
    {
        "label": "create_task",
        "kind": 2,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.views",
        "description": "TASK_MANAGER_PROJECT.task_manager.views",
        "peekOfCode": "def create_task(request):\n    if request.method == \"POST\":\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.user = request.user\n            task.save()\n            return redirect(\"task_list\")\n    else:\n        form = TaskForm()",
        "detail": "TASK_MANAGER_PROJECT.task_manager.views",
        "documentation": {}
    },
    {
        "label": "edit_task",
        "kind": 2,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.views",
        "description": "TASK_MANAGER_PROJECT.task_manager.views",
        "peekOfCode": "def edit_task(request, task_id):\n    task = get_object_or_404(Task, id=task_id)\n    if request.method == \"POST\":\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect(\"task_list\")\n    else:\n        form = TaskForm(instance=task)\n    return render(request, \"task_manager/task_form.html\", {\"form\": form, \"task\": task})",
        "detail": "TASK_MANAGER_PROJECT.task_manager.views",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.views",
        "description": "TASK_MANAGER_PROJECT.task_manager.views",
        "peekOfCode": "def delete_task(request, task_id):\n    task = get_object_or_404(Task, id=task_id)\n    if request.method == \"POST\":\n        task.delete()\n        return redirect(\"task_list\")\n    return render(request, \"task_manager/task_confirm_delete.html\", {\"task\": task})\n# ... existing views ...\n@login_required\ndef create_task(request):\n    if request.method == \"POST\":",
        "detail": "TASK_MANAGER_PROJECT.task_manager.views",
        "documentation": {}
    },
    {
        "label": "create_task",
        "kind": 2,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.views",
        "description": "TASK_MANAGER_PROJECT.task_manager.views",
        "peekOfCode": "def create_task(request):\n    if request.method == \"POST\":\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.user = request.user\n            task.save()\n            return redirect(\"task_list\")\n    else:\n        form = TaskForm()",
        "detail": "TASK_MANAGER_PROJECT.task_manager.views",
        "documentation": {}
    },
    {
        "label": "edit_task",
        "kind": 2,
        "importPath": "TASK_MANAGER_PROJECT.task_manager.views",
        "description": "TASK_MANAGER_PROJECT.task_manager.views",
        "peekOfCode": "def edit_task(request, task_id):\n    task = get_object_or_404(Task, id=task_id)\n    if request.method == \"POST\":\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect(\"task_list\")\n    else:\n        form = TaskForm(instance=task)\n    return render(request, \"task_manager/task_form.html\", {\"form\": form, \"task\": task})",
        "detail": "TASK_MANAGER_PROJECT.task_manager.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.asgi",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-q4^)9$1_aqzin@@&uvu%5p29g9f)vd)b5j-%+p%gw@@y(t94dt\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-q4^)9$1_aqzin@@&uvu%5p29g9f)vd)b5j-%+p%gw@@y(t94dt\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"task_manager\",",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"task_manager\",\n]\nMIDDLEWARE = [",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"task_manager_project.urls\"",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "ROOT_URLCONF = \"task_manager_project.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "WSGI_APPLICATION = \"task_manager_project.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.settings",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.task_manager_project.wsgi",
        "description": "TASK_MANAGER_PROJECT.task_manager_project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "TASK_MANAGER_PROJECT.task_manager_project.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "TASK_MANAGER_PROJECT.manage",
        "description": "TASK_MANAGER_PROJECT.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"task_manager_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "TASK_MANAGER_PROJECT.manage",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.urls",
        "description": "TASK_MANAGER_PROJECT.urls",
        "peekOfCode": "urlpatterns = [\n    # ... existing URL patterns ...\n    path(\"login/\", auth_views.LoginView.as_view(), name=\"login\"),\n    path(\"logout/\", auth_views.LogoutView.as_view(), name=\"logout\"),\n    path(\"signup/\", views.signup, name=\"signup\"),\n]\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"task_manager.urls\")),\n]",
        "detail": "TASK_MANAGER_PROJECT.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "TASK_MANAGER_PROJECT.urls",
        "description": "TASK_MANAGER_PROJECT.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"task_manager.urls\")),\n]",
        "detail": "TASK_MANAGER_PROJECT.urls",
        "documentation": {}
    }
]